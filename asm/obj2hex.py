#!/usr/bin/env python3

"""
Converts a Brandon object file generated by as2oj to hex you can paste
into a Roigism JSON file.
"""

import sys
from collections import namedtuple
from argparse import ArgumentParser

ObjectFileSegment = namedtuple('ObjectFileSegment', ('start', 'contents'))


class ObjectFile:
    """Parse a Brandon object file"""

    # This is an LC-3 object file, so each word is 2 bytes
    WORD_SIZE = 2

    def __init__(self, objfile):
        self._segments = []

        self.parse(objfile)

    def parse(self, objfile):
        """Parse segments from `fp' until EOF."""

        while True:
            buf = objfile.read(self.WORD_SIZE)

            # EOF
            if not buf:
                break
            elif len(buf) != self.WORD_SIZE:
                raise ValueError('start address is only one byte!')

            start_addr = int.from_bytes(buf, byteorder='big')

            buf = objfile.read(self.WORD_SIZE)
            if len(buf) != self.WORD_SIZE:
                raise ValueError('short read for segment length')

            length = int.from_bytes(buf, byteorder='big')

            buf = objfile.read(length * self.WORD_SIZE)
            if len(buf) != length * self.WORD_SIZE:
                raise ValueError('short read for segment body')

            self._segments.append(ObjectFileSegment(start_addr, buf))

    def segments(self):
        """
        Return list of ObjectFileSegment instances which represent the
        segments in this object file.
        """

        return self._segments


def roiize(segments, word_size=2):
    """
    Convert a list of ObjectFileSegment instances into a string in Roi
    abbreviated form.
    """

    words = []
    current_addr = 0

    for segment in sorted(segments, key=lambda seg: seg.start):
        if segment.start > current_addr:
            words.append('{}-{}'.format(segment.start - current_addr,
                                        '00' * word_size))
            current_addr = segment.start

        for i in range(0, len(segment.contents), word_size):
            word = segment.contents[i:i + word_size]
            words.append(word.hex())

        current_addr += len(segment.contents) // word_size

    return ' '.join(words)


def main(argv):
    """
    Accept a path to an object file on the command line and convert it
    to Roi hex.
    """

    parser = ArgumentParser(prog=argv[0],
                            description='Convert Brandon object files to hex '
                                        'ready for Roigisim JSON')
    parser.add_argument('objfile')
    parser.add_argument('hexfile', nargs='?', default=None)
    args = parser.parse_args(argv[1:])

    with open(args.objfile, 'rb') as objfile:
        obj = ObjectFile(objfile)

    roiized = roiize(obj.segments())

    if args.hexfile == '-':
        print(roiized)
    else:
        if args.hexfile is not None:
            hexpath = args.hexfile
        else:
            hexpath = '{}.hex'.format(args.objfile.rsplit('.', maxsplit=1)[0])

        with open(hexpath, 'w') as hexfile:
            hexfile.write(roiized)

    return 0


if __name__ == '__main__':
    sys.exit(main(sys.argv))
